package controllers

import (
	"context"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/mayank2904gupta/image_generator/backend/config"
	"github.com/mayank2904gupta/image_generator/backend/models"
	"github.com/mayank2904gupta/image_generator/backend/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"golang.org/x/crypto/bcrypt"
)

func RegisterUserHandler(c *gin.Context) {
	var inputUser models.User
	//binding json request body in inputUser
	if err := c.ShouldBindJSON(&inputUser); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "Invalid Input", "error": err.Error()})
		return
	}
	//validate user struct
	if err := utils.ValidateStruct(inputUser); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "Validation failed", "error": err.Error()})
		return
	}
	inputUser = models.NewUser(inputUser)
	//get mongodb collection
	collection := config.GetCollection("users")

	//checking user already exists by email?
	var existingUser models.User
	err := collection.FindOne(context.Background(), bson.M{"email": inputUser.Email}).Decode(&existingUser)
	if err == nil {
		c.JSON(http.StatusConflict, gin.H{"message": "User Already exists"})
		return
	} else if err != mongo.ErrNoDocuments {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "database error", "error": err.Error()})
		return
	}
	//hashing password before saving
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(inputUser.Password), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "error hashing password"})
		return
	}
	inputUser.Password = string(hashedPassword)

	//token generated by email
	token, err := utils.GenerateToken(inputUser.Email)

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "error in generating token", "error": err.Error()})
		return
	}
	//input user in database
	ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
	defer cancel()

	_, err = collection.InsertOne(ctx, inputUser)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "inserting user error"})
		return
	}

	// return response
	c.JSON(http.StatusCreated, gin.H{
		"success": true,
		"token":   token,
		"user":    gin.H{"name": inputUser.Name},
		"message": "sign up successfully",
	})
}

func LoginUserHandler(c *gin.Context) {
	var inputCredential models.User

	if err := c.ShouldBindJSON(&inputCredential); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"success": false, "message": "Invalid input"})
		return
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	collection := config.GetCollection("users")

	var storedUser models.User
	err := collection.FindOne(ctx, bson.M{"email": inputCredential.Email}).Decode(&storedUser)

	if err != nil {
		if err == mongo.ErrNoDocuments {
			c.JSON(http.StatusUnauthorized, gin.H{"success": false, "message": "No user found with these credentials"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"success": false, "message": "Database error"})
		return
	}

	// Check password
	err = bcrypt.CompareHashAndPassword([]byte(storedUser.Password), []byte(inputCredential.Password))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"success": false, "message": "Password does not match"})
		return
	}

	// Generate token
	token, err := utils.GenerateToken(storedUser.Email)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "Error in generating token", "error": err.Error()})
		return
	}

	// Return token & user data
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "Login successful",
		"token": token,
		"user": gin.H{"name": storedUser.Name},
	})
}

func UserCredits(c *gin.Context){
	email, exists := c.Get("email")
    if !exists {
        c.JSON(http.StatusBadRequest, gin.H{"success": false, "message": "Email not found"})
        return
    }
	ctx,cancel:=context.WithTimeout(context.Background(),10*time.Second)
	defer cancel()

	collection := config.GetCollection("users")

	var user models.User	

	err:=collection.FindOne(ctx,bson.M{"email":email}).Decode(&user)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			c.JSON(http.StatusUnauthorized, gin.H{"success": false, "message": "no user found with this credentials"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"success": false, "message": "database error"})
		return
	}
	c.JSON(http.StatusOK,gin.H{"success":true,"creditsBalance":user.CreditBalance})
}